import asyncio
import os
import shutil
from typing import List, Dict
from datetime import datetime
import logging
import sys
from pathlib import Path
from aiogram import Bot, Dispatcher, F
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import (
    Message, CallbackQuery,
    InlineKeyboardMarkup, InlineKeyboardButton,
    ReplyKeyboardMarkup, ReplyKeyboardRemove
)
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from dotenv import load_dotenv
from sqlalchemy import Column, Integer, String, Float, DateTime, JSON, ForeignKey, Text
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import relationship, joinedload, Session
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker

# –õ–æ–∫–∞–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
from database import get_db, init_db, engine
from models import User, Category, Product, CartItem, Order, OrderItem
from repositories import (
    UserRepository, CategoryRepository, ProductRepository,
    CartRepository, OrderRepository
)

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN", "")
ADMIN_CHAT_IDS = [int(x.strip()) for x in os.getenv("ADMIN_CHAT_IDS", "").split(",") if x.strip()]
if not BOT_TOKEN:
    raise RuntimeError("–ù–µ —É–∫–∞–∑–∞–Ω BOT_TOKEN –≤ .env")

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
IMAGES_DIR = Path("product_images")
IMAGES_DIR.mkdir(exist_ok=True)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
init_db()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler('bot.log', encoding='utf-8')
    ]
)
logger = logging.getLogger(__name__)

class OrderFSM(StatesGroup):
    waiting_fullname = State()
    waiting_phone = State()
    waiting_delivery_type = State()
    waiting_cdek_city = State()
    waiting_cdek_pvz = State()
    waiting_address = State()
    confirm = State()

class AdminFSM(StatesGroup):
    waiting_product_name = State()
    waiting_product_description = State()
    waiting_product_price = State()
    waiting_product_sizes = State()
    waiting_product_category = State()
    waiting_product_images = State()
    waiting_product_confirm = State()

def main_menu_kb() -> ReplyKeyboardMarkup:
    kb = ReplyKeyboardBuilder()
    kb.button(text="üì∏ –ö–∞—Ç–∞–ª–æ–≥")
    kb.button(text="üõí –ö–æ—Ä–∑–∏–Ω–∞")
    kb.button(text="üßæ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑")
    kb.button(text="‚ùì –ü–æ–º–æ—â—å")
    kb.adjust(2, 2)
    return kb.as_markup(resize_keyboard=True)

def admin_menu_kb() -> ReplyKeyboardMarkup:
    kb = ReplyKeyboardBuilder()
    kb.button(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    kb.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä")
    kb.button(text="üì¶ –í—Å–µ –∑–∞–∫–∞–∑—ã")
    kb.button(text="üñºÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏")
    kb.button(text="üë§ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    kb.adjust(2, 2, 1)
    return kb.as_markup(resize_keyboard=True)

def categories_ikb() -> InlineKeyboardMarkup:
    db = next(get_db())
    try:
        categories = CategoryRepository.get_all_active(db)

        ib = InlineKeyboardBuilder()
        for category in categories:
            ib.button(text=category.title, callback_data=f"cat:{category.key}")
        ib.adjust(1)
        return ib.as_markup()
    finally:
        db.close()

def category_products_ikb(cat_key: str) -> InlineKeyboardMarkup:
    db = next(get_db())
    try:
        category = CategoryRepository.get_by_key(db, cat_key)
        if not category:
            return InlineKeyboardMarkup(inline_keyboard=[])

        products = ProductRepository.get_by_category(db, category.id)

        ib = InlineKeyboardBuilder()
        for product in products:
            ib.button(text=f"{product.name} ‚Äî {product.price} ‚ÇΩ", callback_data=f"prod:{product.id}")
        ib.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="back:cats")
        ib.adjust(1)
        return ib.as_markup()
    finally:
        db.close()

def product_sizes_ikb(product_id: int) -> InlineKeyboardMarkup:
    db = next(get_db())
    try:
        product = ProductRepository.get_by_id(db, product_id)
        if not product:
            return InlineKeyboardMarkup(inline_keyboard=[])

        category_key = product.category.key

        ib = InlineKeyboardBuilder()
        for size in product.sizes:
            ib.button(text=size, callback_data=f"size:{product.id}:{size}")
        ib.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–æ–≤–∞—Ä–∞–º", callback_data=f"back:cat:{category_key}")
        ib.adjust(4, 1)
        return ib.as_markup()
    finally:
        db.close()

def qty_ikb(product_id: int, size: str) -> InlineKeyboardMarkup:
    ib = InlineKeyboardBuilder()
    for q in [1, 2, 3, 4, 5]:
        ib.button(text=str(q), callback_data=f"qty:{product_id}:{size}:{q}")
    ib.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ä–∞–∑–º–µ—Ä–∞–º", callback_data=f"back:size:{product_id}")
    ib.adjust(5, 1)
    return ib.as_markup()

def checkout_delivery_ikb() -> InlineKeyboardMarkup:
    ib = InlineKeyboardBuilder()
    ib.button(text="üì¶ CDEK (–ü–í–ó)", callback_data="delivery:cdek")
    ib.button(text="üöö –ö—É—Ä—å–µ—Ä –¥–æ –¥–≤–µ—Ä–∏", callback_data="delivery:courier")
    ib.adjust(1)
    return ib.as_markup()

def confirm_ikb() -> InlineKeyboardMarkup:
    ib = InlineKeyboardBuilder()
    ib.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="confirm:yes")
    ib.button(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å", callback_data="confirm:edit_address")
    ib.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="confirm:cancel")
    ib.adjust(1)
    return ib.as_markup()

def format_cart(user_id: int) -> str:
    db = next(get_db())
    try:
        user = db.query(User).filter(User.telegram_id == user_id).first()
        if not user:
            return "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω."

        cart_items = db.query(CartItem).filter(CartItem.user_id == user.id).all()

        if not cart_items:
            return "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞."

        lines = ["üõí *–ö–æ—Ä–∑–∏–Ω–∞:*"]
        total = 0

        for item in cart_items:
            product = db.query(Product).filter(Product.id == item.product_id).first()
            if product:
                line_total = product.price * item.quantity
                lines.append(f"‚Ä¢ {product.name} ‚Äî {item.size} √ó {item.quantity} = *{line_total} ‚ÇΩ*")
                total += line_total

        lines.append(f"\n–ò—Ç–æ–≥–æ: *{total} ‚ÇΩ*")
        return "\n".join(lines)
    except Exception as e:
        logger.error(f"Error formatting cart: {e}")
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ—Ä–∑–∏–Ω—ã."
    finally:
        db.close()

async def notify_admins(bot: Bot, order: Order):
    text_lines = [
        "üÜï *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!*",
        f"–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {order.order_number}",
        f"–î–∞—Ç–∞/–≤—Ä–µ–º—è: {order.created_at.strftime('%Y-%m-%d %H:%M')}",
        f"–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {order.fullname}",
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {order.phone}",
        "",
        "–¢–æ–≤–∞—Ä—ã:"
    ]

    db = next(get_db())
    try:
        for item in order.items:
            text_lines.append(f"‚Ä¢ {item.product_name} ‚Äî {item.size} √ó {item.quantity} = {item.total} ‚ÇΩ")
    finally:
        db.close()

    text_lines.append(f"\n–ò—Ç–æ–≥–æ: *{order.total_amount} ‚ÇΩ*")
    text_lines.append("")
    text_lines.append(f"–î–æ—Å—Ç–∞–≤–∫–∞: {order.delivery_type}")

    if order.delivery_type == "cdek":
        delivery_data = order.delivery_address
        text_lines.append(f"–ì–æ—Ä–æ–¥ (CDEK): {delivery_data.get('city')}")
        text_lines.append(f"–ü–í–ó: {delivery_data.get('pvz')}")
    else:
        delivery_data = order.delivery_address
        text_lines.append(f"–ê–¥—Ä–µ—Å: {delivery_data.get('address')}")

    text_lines.append(f"\nUser ID: {order.user.telegram_id}")
    payload = "\n".join(text_lines)
    for chat_id in ADMIN_CHAT_IDS:
        try:
            await bot.send_message(chat_id, payload, parse_mode="Markdown")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {chat_id}: {e}")

dp = Dispatcher(storage=MemoryStorage())
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode="Markdown"))

@dp.message(CommandStart())
async def on_start(message: Message):
    logger.info(f"User {message.from_user.id} started bot")

    db = next(get_db())
    try:
        user = UserRepository.get_or_create_user(
            db,
            message.from_user.id,
            message.from_user.username,
            message.from_user.first_name,
            message.from_user.last_name
        )
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, –µ—Å–ª–∏ ID –≤ —Å–ø–∏—Å–∫–µ
        if message.from_user.id in ADMIN_CHAT_IDS:
            user.is_admin = True
            db.commit()
            logger.info(f"User {message.from_user.id} set as admin")
            
    finally:
        db.close()

    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –¥–ª—è –∑–∞–∫–∞–∑–æ–≤ –æ–¥–µ–∂–¥—ã –≠–º–ø–µ—Ä–∞–¥–æ—Ä.\n\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu_kb()
    )

@dp.message(Command("help"))
@dp.message(F.text == "‚ùì –ü–æ–º–æ—â—å")
async def on_help(message: Message):
    logger.info(f"User {message.from_user.id} requested help")
    await message.answer(
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /start ‚Äî –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "‚Ä¢ /catalog ‚Äî –æ—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥\n"
        "‚Ä¢ /cart ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∫–æ—Ä–∑–∏–Ω—É\n"
        "‚Ä¢ /checkout ‚Äî –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑\n"
        "‚Ä¢ /cancel ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ\n"
        "‚Ä¢ /admin ‚Äî –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
    )

@dp.message(Command("catalog"))
@dp.message(F.text == "üì∏ –ö–∞—Ç–∞–ª–æ–≥")
async def on_catalog(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=categories_ikb())

@dp.callback_query(F.data.startswith("cat:"))
async def on_category_select(cb: CallbackQuery):
    try:
        category_key = cb.data.split(":")[1]
        await cb.message.answer(f"–¢–æ–≤–∞—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:", reply_markup=category_products_ikb(category_key))
        await cb.answer()
    except Exception as e:
        logger.error(f"Error in on_category_select: {e}")
        await cb.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")

@dp.callback_query(F.data.startswith("prod:"))
async def on_product_select(cb: CallbackQuery):
    product_id = int(cb.data.split(":")[1])

    db = next(get_db())
    try:
        product = ProductRepository.get_by_id(db, int(product_id))
        if not product:
            await cb.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        description = [
            f"*{product.name}*",
            f"–¶–µ–Ω–∞: {product.price} ‚ÇΩ",
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {product.description}",
            f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã: {', '.join(product.sizes)}",
            "",
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä:"
        ]

        if product.images:
            with open(product.images[0], 'rb') as photo:
                await cb.message.answer_photo(
                    photo=photo,
                    caption="\n".join(description),
                    reply_markup=product_sizes_ikb(product.id),
                    parse_mode="Markdown"
                )
        else:
            await cb.message.answer(
                "\n".join(description),
                reply_markup=product_sizes_ikb(product.id),
                parse_mode="Markdown"
            )

    except Exception as e:
        logger.error(f"Error showing product: {e}")
        await cb.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–æ–≤–∞—Ä–∞")
    finally:
        db.close()

    await cb.answer()

@dp.callback_query(F.data.startswith("size:"))
async def on_size_select(cb: CallbackQuery):
    _, product_id, size = cb.data.split(":")

    db = next(get_db())
    try:
        product = ProductRepository.get_by_id(db, int(product_id))
        if not product:
            await cb.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        category_key = product.category.key

    finally:
        db.close()

    await cb.message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è —Ä–∞–∑–º–µ—Ä–∞ {size}:",
                           reply_markup=qty_ikb(int(product_id), size))
    await cb.answer()

@dp.callback_query(F.data.startswith("qty:"))
async def on_qty(cb: CallbackQuery):
    _, product_id, size, qty_str = cb.data.split(":")
    qty = int(qty_str)

    db = next(get_db())
    try:
        product = ProductRepository.get_by_id(db, int(product_id))
        if not product:
            await cb.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        user = UserRepository.get_or_create_user(
            db,
            cb.from_user.id,
            cb.from_user.username,
            cb.from_user.first_name,
            cb.from_user.last_name
        )

        CartRepository.add_to_cart(db, user.id, product.id, size, qty)

        product_name = product.name
        product_price = product.price

    except Exception as e:
        logger.error(f"Error adding to cart: {e}")
        await cb.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É")
        return
    finally:
        db.close()

    cart_text = format_cart(cb.from_user.id)

    await cb.message.answer(
        f"–î–æ–±–∞–≤–ª–µ–Ω–æ: {product_name} ‚Äî {size} √ó {qty} = *{product_price * qty} ‚ÇΩ*\n\n{cart_text}",
        reply_markup=main_menu_kb()
    )
    await cb.answer("–í –∫–æ—Ä–∑–∏–Ω–µ!")

@dp.message(Command("cart"))
@dp.message(F.text == "üõí –ö–æ—Ä–∑–∏–Ω–∞")
async def on_cart(message: Message):
    await message.answer(format_cart(message.from_user.id))

@dp.message(Command("checkout"))
@dp.message(F.text == "üßæ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑")
async def on_checkout(message: Message, state: FSMContext):
    cart_text = format_cart(message.from_user.id)
    if "–ø—É—Å—Ç–∞" in cart_text:
        await message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –ø–µ—Ä–µ–¥ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º –∑–∞–∫–∞–∑–∞.")
        return

    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")
    await state.set_state(OrderFSM.waiting_fullname)

@dp.message(OrderFSM.waiting_fullname)
async def on_fullname(message: Message, state: FSMContext):
    await state.update_data(fullname=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω:")
    await state.set_state(OrderFSM.waiting_phone)

@dp.message(OrderFSM.waiting_phone)
async def on_phone(message: Message, state: FSMContext):
    await state.update_data(phone=message.text)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏:", reply_markup=checkout_delivery_ikb())
    await state.set_state(OrderFSM.waiting_delivery_type)

@dp.callback_query(OrderFSM.waiting_delivery_type, F.data.startswith("delivery:"))
async def on_delivery_type(cb: CallbackQuery, state: FSMContext):
    delivery_type = cb.data.split(":")[1]
    await state.update_data(delivery_type=delivery_type)

    if delivery_type == "cdek":
        await cb.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ü–í–ó CDEK:")
        await state.set_state(OrderFSM.waiting_cdek_city)
    else:
        await cb.message.answer("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:")
        await state.set_state(OrderFSM.waiting_address)

    await cb.answer()

@dp.message(OrderFSM.waiting_cdek_city)
async def on_cdek_city(message: Message, state: FSMContext):
    await state.update_data(cdek_city=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ü–í–ó CDEK:")
    await state.set_state(OrderFSM.waiting_cdek_pvz)

@dp.message(OrderFSM.waiting_cdek_pvz)
async def on_cdek_pvz(message: Message, state: FSMContext):
    await state.update_data(cdek_pvz=message.text)

    data = await state.get_data()
    delivery_info = f"–ì–æ—Ä–æ–¥: {data['cdek_city']}, –ü–í–ó: {data['cdek_pvz']}"

    await message.answer(
        f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∞–≤–∫–∏:\n{delivery_info}\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑?",
        reply_markup=confirm_ikb()
    )
    await state.set_state(OrderFSM.confirm)

@dp.message(OrderFSM.waiting_address)
async def on_address(message: Message, state: FSMContext):
    await state.update_data(address=message.text)

    data = await state.get_data()
    await message.answer(
        f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:\n{data['address']}\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑?",
        reply_markup=confirm_ikb()
    )
    await state.set_state(OrderFSM.confirm)

@dp.callback_query(OrderFSM.confirm, F.data == "confirm:yes")
async def confirm_order(cb: CallbackQuery, state: FSMContext):
    user_id = cb.from_user.id
    data = await state.get_data()

    db = next(get_db())
    try:
        user = UserRepository.get_or_create_user(
            db,
            cb.from_user.id,
            cb.from_user.username,
            cb.from_user.first_name,
            cb.from_user.last_name
        )

        cart_items = CartRepository.get_user_cart(db, user.id)
        if not cart_items:
            await state.clear()
            await cb.message.answer("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –ù–µ—á–µ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—Ç—å.", reply_markup=main_menu_kb())
            await cb.answer()
            return

        delivery_data = {}
        if data.get("delivery_type") == "cdek":
            delivery_data = {
                "city": data.get("cdek_city"),
                "pvz": data.get("cdek_pvz")
            }
        else:
            delivery_data = {
                "address": data.get("address")
            }

        order = OrderRepository.create_order(
            db, user.id, cart_items,
            data.get("fullname"), data.get("phone"),
            data.get("delivery_type"), delivery_data
        )

        await notify_admins(cb.message.bot, order)
    finally:
        db.close()

    await state.clear()
    await cb.message.answer(
        "‚úÖ –ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π. –°–ø–∞—Å–∏–±–æ!",
        reply_markup=main_menu_kb()
    )
    await cb.answer()

# –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
@dp.message(Command("admin"))
async def admin_panel(message: Message):
    db = next(get_db())
    try:
        if not UserRepository.is_admin(db, message.from_user.id):
            await message.answer("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
            return
    finally:
        db.close()

    await message.answer("–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=admin_menu_kb())

@dp.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
@dp.message(Command("admin_stats"))
async def admin_stats(message: Message):
    db = next(get_db())
    try:
        if not UserRepository.is_admin(db, message.from_user.id):
            await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
            return

        total_orders = db.query(Order).count()
        total_users = db.query(User).count()
        pending_orders = db.query(Order).filter(Order.status == "pending").count()

        revenue = db.query(Order).filter(Order.status.in_(["confirmed", "processing", "shipped", "delivered"])).all()
        total_revenue = sum(order.total_amount for order in revenue)
    finally:
        db.close()

    stats_text = [
        "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞–≥–∞–∑–∏–Ω–∞*",
        f"–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {total_orders}",
        f"–û–∂–∏–¥–∞—é—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏: {pending_orders}",
        f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}",
        f"–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: {total_revenue} ‚ÇΩ"
    ]

    await message.answer("\n".join(stats_text))

@dp.message(F.text == "üì¶ –í—Å–µ –∑–∞–∫–∞–∑—ã")
@dp.message(Command("admin_orders"))
async def admin_orders(message: Message):
    db = next(get_db())
    try:
        if not UserRepository.is_admin(db, message.from_user.id):
            await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
            return

        orders = OrderRepository.get_all_orders(db, limit=10)
    finally:
        db.close()

    if not orders:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.")
        return

    for order in orders:
        order_text = [
            f"üßæ *–ó–∞–∫–∞–∑ {order.order_number}*",
            f"–°—Ç–∞—Ç—É—Å: {order.status}",
            f"–î–∞—Ç–∞: {order.created_at.strftime('%d.%m.%Y %H:%M')}",
            f"–ö–ª–∏–µ–Ω—Ç: {order.fullname}",
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {order.phone}",
            f"–°—É–º–º–∞: {order.total_amount} ‚ÇΩ",
            f"–î–æ—Å—Ç–∞–≤–∫–∞: {order.delivery_type}"
        ]
        await message.answer("\n".join(order_text))

@dp.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä")
@dp.message(Command("add_product"))
async def add_product_start(message: Message, state: FSMContext):
    db = next(get_db())
    try:
        if not UserRepository.is_admin(db, message.from_user.id):
            await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
            return
    finally:
        db.close()

    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
    await state.set_state(AdminFSM.waiting_product_name)

@dp.message(AdminFSM.waiting_product_name)
async def add_product_name(message: Message, state: FSMContext):
    await state.update_data(product_name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
    await state.set_state(AdminFSM.waiting_product_description)

@dp.message(AdminFSM.waiting_product_description)
async def add_product_description(message: Message, state: FSMContext):
    await state.update_data(product_description=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):")
    await state.set_state(AdminFSM.waiting_product_price)

@dp.message(AdminFSM.waiting_product_price)
async def add_product_price(message: Message, state: FSMContext):
    try:
        price = int(message.text)
        await state.update_data(product_price=price)

        db = next(get_db())
        try:
            categories = CategoryRepository.get_all_active(db)
        finally:
            db.close()

        kb = InlineKeyboardBuilder()
        for category in categories:
            kb.button(text=category.title, callback_data=f"admin_cat:{category.id}")
        kb.adjust(1)

        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=kb.as_markup())
        await state.set_state(AdminFSM.waiting_product_category)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):")

@dp.callback_query(AdminFSM.waiting_product_category, F.data.startswith("admin_cat:"))
async def add_product_category(cb: CallbackQuery, state: FSMContext):
    category_id = int(cb.data.split(":")[1])
    await state.update_data(category_id=category_id)
    await cb.message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: S,M,L,XL):")
    await state.set_state(AdminFSM.waiting_product_sizes)
    await cb.answer()

@dp.message(AdminFSM.waiting_product_sizes)
async def add_product_sizes(message: Message, state: FSMContext):
    sizes = [size.strip() for size in message.text.split(",")]
    await state.update_data(product_sizes=sizes)
    await message.answer("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Ç–æ–≤–∞—Ä–∞ (–¥–æ 5 —Ñ–æ—Ç–æ). –û—Ç–ø—Ä–∞–≤—å—Ç–µ '–ì–æ—Ç–æ–≤–æ' –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ:")
    await state.set_state(AdminFSM.waiting_product_images)

@dp.message(AdminFSM.waiting_product_images, F.photo)
async def add_product_photo(message: Message, state: FSMContext):
    data = await state.get_data()
    images = data.get('product_images', [])

    if len(images) >= 5:
        await message.answer("–ú–∞–∫—Å–∏–º—É–º 5 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π. –ù–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")
        return

    photo = message.photo[-1]
    file_id = photo.file_id
    file = await bot.get_file(file_id)
    file_path = file.file_path

    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = f"product_{timestamp}_{len(images)}.jpg"
    save_path = IMAGES_DIR / filename

    await bot.download_file(file_path, save_path)

    images.append(str(save_path))
    await state.update_data(product_images=images)

    await message.answer(f"–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ ({len(images)}/5). –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ —Ñ–æ—Ç–æ –∏–ª–∏ '–ì–æ—Ç–æ–≤–æ':")

@dp.message(AdminFSM.waiting_product_images, F.text == "–ì–æ—Ç–æ–≤–æ")
async def finish_photos(message: Message, state: FSMContext):
    data = await state.get_data()

    if not data.get('product_images'):
        await message.answer("–í—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ —Ñ–æ—Ç–æ? (–¥–∞/–Ω–µ—Ç)")
        await state.set_state(AdminFSM.waiting_product_confirm)
        return

    preview_text = [
        "üìã *–ü—Ä–µ–≤—å—é —Ç–æ–≤–∞—Ä–∞:*",
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {data['product_name']}",
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {data['product_description']}",
        f"–¶–µ–Ω–∞: {data['product_price']} ‚ÇΩ",
        f"–†–∞–∑–º–µ—Ä—ã: {', '.join(data['product_sizes'])}",
        f"–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {len(data['product_images'])}",
        "",
        "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–≤–∞—Ä? (–¥–∞/–Ω–µ—Ç)"
    ]

    with open(data['product_images'][0], 'rb') as photo:
        await message.answer_photo(
            photo=photo,
            caption="\n".join(preview_text),
            parse_mode="Markdown"
        )

    await state.set_state(AdminFSM.waiting_product_confirm)

@dp.message(AdminFSM.waiting_product_confirm, F.text.lower() == "–¥–∞")
async def confirm_product_save(message: Message, state: FSMContext):
    data = await state.get_data()

    db = next(get_db())
    try:
        category = db.query(Category).filter(Category.id == data['category_id']).first()
        product_count = db.query(Product).filter(Product.category_id == data['category_id']).count()
        product_id = f"{category.key}_{product_count + 1:03d}"

        product = Product(
            category_id=data['category_id'],
            product_id=product_id,
            name=data['product_name'],
            description=data['product_description'],
            price=data['product_price'],
            sizes=data['product_sizes'],
            images=data.get('product_images', [])
        )

        db.add(product)
        db.commit()
        db.refresh(product)
    except Exception as e:
        logger.error(f"Error saving product: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞.")
        return
    finally:
        db.close()

    await message.answer(f"‚úÖ –¢–æ–≤–∞—Ä '{data['product_name']}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
    await state.clear()

@dp.message(AdminFSM.waiting_product_confirm, F.text.lower() == "–Ω–µ—Ç")
async def cancel_product_save(message: Message, state: FSMContext):
    data = await state.get_data()
    for image_path in data.get('product_images', []):
        try:
            os.remove(image_path)
        except:
            pass

    await message.answer("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await state.clear()

@dp.message(F.text == "üñºÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏")
async def manage_products(message: Message):
    db = next(get_db())
    try:
        if not UserRepository.is_admin(db, message.from_user.id):
            await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
            return

        products = db.query(Product).all()
    finally:
        db.close()

    if not products:
        await message.answer("–¢–æ–≤–∞—Ä–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    kb = InlineKeyboardBuilder()
    for product in products:
        kb.button(text=product.name, callback_data=f"edit_prod:{product.id}")
    kb.adjust(1)

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=kb.as_markup())

@dp.callback_query(F.data.startswith("edit_prod:"))
async def edit_product(cb: CallbackQuery):
    product_id = int(cb.data.split(":")[1])

    db = next(get_db())
    try:
        product = db.query(Product).filter(Product.id == product_id).first()
        if not product:
            await cb.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        text = [
            f"üì¶ *{product.name}*",
            f"–¶–µ–Ω–∞: {product.price} ‚ÇΩ",
            f"–†–∞–∑–º–µ—Ä—ã: {', '.join(product.sizes)}",
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {product.category.title}",
            f"ID: {product.product_id}",
            "",
            "–î–µ–π—Å—Ç–≤–∏—è:"
        ]

        kb = InlineKeyboardBuilder()
        kb.button(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É", callback_data=f"change_price:{product.id}")
        kb.button(text="üìù –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"change_desc:{product.id}")
        kb.button(text="üñºÔ∏è –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ", callback_data=f"add_photo:{product.id}")
        kb.button(text="‚ùå –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data=f"delete_prod:{product.id}")
        kb.adjust(1)

        if product.images:
            with open(product.images[0], 'rb') as photo:
                await cb.message.answer_photo(
                    photo=photo,
                    caption="\n".join(text),
                    reply_markup=kb.as_markup(),
                    parse_mode="Markdown"
                )
        else:
            await cb.message.answer("\n".join(text), reply_markup=kb.as_markup(), parse_mode="Markdown")

    finally:
        db.close()

    await cb.answer()

@dp.message(Command("cancel"))
async def cancel_handler(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return

    await state.clear()
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu_kb())

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –Ω–∞–∑–∞–¥
@dp.callback_query(F.data.startswith("back:"))
async def on_back(cb: CallbackQuery):
    back_type = cb.data.split(":")[1]

    if back_type == "cats":
        await cb.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=categories_ikb())
    elif back_type == "cat":
        category_key = cb.data.split(":")[2]
        await cb.message.answer(f"–¢–æ–≤–∞—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:", reply_markup=category_products_ikb(category_key))
    elif back_type == "size":
        product_id = int(cb.data.split(":")[2])
        await cb.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä:", reply_markup=product_sizes_ikb(product_id))

    await cb.answer()

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" –≤ –∞–¥–º–∏–Ω–∫–µ
@dp.message(F.text == "üë§ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def back_to_main_menu(message: Message):
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_kb())


@dp.message(Command("check_db"))
async def check_db(message: Message):
    db = next(get_db())
    try:
        admin_count = db.query(User).filter(User.is_admin == True).count()
        await message.answer(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –≤ –±–∞–∑–µ: {admin_count}")
    finally:
        db.close()

async def main():
    logger.info("Bot starting...")
    try:
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"Bot stopped with error: {e}")
        raise

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        print("Bot stopped")
