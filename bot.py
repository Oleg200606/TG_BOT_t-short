import asyncio
import os
import logging
import sys
from pathlib import Path
from datetime import datetime, timedelta
from collections import defaultdict
import re
import traceback
from functools import wraps
from typing import Optional, List

from aiogram import Bot, Dispatcher, F
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import (
    Message, CallbackQuery,
    InlineKeyboardMarkup, InlineKeyboardButton,
    ReplyKeyboardMarkup, ReplyKeyboardRemove
)
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from dotenv import load_dotenv
from sqlalchemy.orm import Session, joinedload
import json

# –õ–æ–∫–∞–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
from database import get_db, init_db
from models import User, Category, Product, CartItem, Order, OrderItem, Review
from repositories import (
    TicketRepository, UserRepository, CategoryRepository, ProductRepository,
    CartRepository, OrderRepository, ReviewRepository
)

# –ò–º–ø–æ—Ä—Ç –∞–¥–º–∏–Ω—Å–∫–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
from admins_panel import mention_user, register_admin_panel, register_support, ADMIN_CHAT_IDS

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN", "")
if not BOT_TOKEN:
    raise RuntimeError("–ù–µ —É–∫–∞–∑–∞–Ω BOT_TOKEN –≤ .env")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
init_db()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler('bot.log', encoding='utf-8')
    ]
)
logger = logging.getLogger(__name__)

# =============================================================================
# üõ°Ô∏è –°–ò–°–¢–ï–ú–ê –ó–ê–©–ò–¢–´ –û–¢ –°–ü–ê–ú–ê
# =============================================================================

class RateLimiter:
    def __init__(self):
        self.user_actions = defaultdict(list)
        self.limits = {
            'message': (5, 10),  # 5 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ 10 —Å–µ–∫—É–Ω–¥
            'callback': (10, 5),  # 10 –Ω–∞–∂–∞—Ç–∏–π –≤ 5 —Å–µ–∫—É–Ω–¥
            'support': (2, 60),   # 2 –æ–±—Ä–∞—â–µ–Ω–∏—è –≤ –º–∏–Ω—É—Ç—É
            'order': (3, 300)     # 3 –∑–∞–∫–∞–∑–∞ –≤ 5 –º–∏–Ω—É—Ç
        }
    
    async def check_limit(self, user_id: int, action_type: str) -> bool:
        now = datetime.now()
        limit_count, limit_seconds = self.limits.get(action_type, (5, 10))
        
        user_key = f"{user_id}_{action_type}"
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
        self.user_actions[user_key] = [
            timestamp for timestamp in self.user_actions[user_key]
            if (now - timestamp).seconds < limit_seconds
        ]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
        if len(self.user_actions[user_key]) >= limit_count:
            return False
        
        self.user_actions[user_key].append(now)
        return True

rate_limiter = RateLimiter()

# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–æ–≤
def rate_limit(action_type: str):
    def decorator(func):
        @wraps(func)
        async def wrapper(*args, **kwargs):
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º user_id –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
            update = args[0]
            user_id = update.from_user.id if hasattr(update, 'from_user') else update.message.from_user.id
            
            if not await rate_limiter.check_limit(user_id, action_type):
                if hasattr(update, 'answer'):
                    await update.answer("üö´ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.", show_alert=True)
                return
            return await func(*args, **kwargs)
        return wrapper
    return decorator

# =============================================================================
# ‚úÖ –í–ê–õ–ò–î–ê–¶–ò–Ø –î–ê–ù–ù–´–•
# =============================================================================

class OrderValidation:
    @staticmethod
    def validate_fullname(fullname: str) -> tuple[bool, str]:
        fullname = fullname.strip()
        if len(fullname) < 2 or len(fullname) > 100:
            return False, '–§–ò–û –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 2 –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤'
        if not re.match(r'^[a-zA-Z–∞-—è–ê-–Ø—ë–Å\s\-]+$', fullname):
            return False, '–§–ò–û –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª—ã –∏ –¥–µ—Ñ–∏—Å—ã'
        return True, fullname
    
    @staticmethod
    def validate_phone(phone: str) -> tuple[bool, str]:
        # –û—á–∏—â–∞–µ–º –Ω–æ–º–µ—Ä –æ—Ç –≤—Å–µ–≥–æ –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä
        cleaned = re.sub(r'\D', '', phone)
        if len(cleaned) not in [10, 11]:
            return False, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü—Ä–∏–º–µ—Ä: +7 999 123-45-67'
        return True, cleaned
    
    @staticmethod
    def validate_delivery_type(delivery_type: str) -> tuple[bool, str]:
        if delivery_type not in ['cdek', 'courier']:
            return False, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏'
        return True, delivery_type

# =============================================================================
# üõ†Ô∏è –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö
# =============================================================================

# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –ë–î
def safe_db_operation(func):
    @wraps(func)
    async def wrapper(*args, **kwargs):
        try:
            return await func(*args, **kwargs)
        except Exception as e:
            logger.error(f"Database operation failed in {func.__name__}: {e}")
            
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            try:
                update = args[0]
                if hasattr(update, 'message'):
                    await update.message.answer("üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                elif hasattr(update, 'answer'):
                    await update.answer("üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
            except:
                pass
            
            return None
    return wrapper

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –ë–î
def get_db_safe():
    try:
        db = next(get_db())
        return db
    except Exception as e:
        logger.error(f"Failed to get database session: {e}")
        return None

# –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
async def retry_operation(operation, max_retries=3, delay=1):
    for attempt in range(max_retries):
        try:
            return await operation()
        except Exception as e:
            if attempt == max_retries - 1:
                raise e
            await asyncio.sleep(delay)
    return None

# =============================================================================
# üîî –°–ò–°–¢–ï–ú–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–ô
# =============================================================================

async def send_order_notification(user_id: int, order: Order, old_status: str = None):
    status_messages = {
        "pending": "üü° –í–∞—à –∑–∞–∫–∞–∑ –æ–∂–∏–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏",
        "confirmed": "‚úÖ –ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω",
        "processing": "üîß –ó–∞–∫–∞–∑ —Å–æ–±–∏—Ä–∞–µ—Ç—Å—è",
        "shipped": "üöö –ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω",
        "delivered": "üì¶ –ó–∞–∫–∞–∑ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω",
        "cancelled": "‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω",
        "closed": "üîí –ó–∞–∫–∞–∑ –∑–∞–≤–µ—Ä—à–µ–Ω"
    }
    
    message = status_messages.get(order.status, "üìã –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω")
    
    try:
        await bot.send_message(
            user_id, 
            f"{message} #{order.order_number}\n"
            f"üí≥ –°—É–º–º–∞: {order.total_amount} ‚ÇΩ\n"
            f"üì¶ –°—Ç–∞—Ç—É—Å: {order.status}"
        )
    except Exception as e:
        logger.error(f"Failed to send notification to {user_id}: {e}")

# =============================================================================
# –°–û–°–¢–û–Ø–ù–ò–Ø FSM
# =============================================================================

class OrderFSM(StatesGroup):
    waiting_fullname = State()
    waiting_phone = State()
    waiting_delivery_type = State()
    waiting_cdek_city = State()
    waiting_cdek_pvz = State()
    waiting_address = State()
    confirm = State()

class SupportFSM(StatesGroup):
    waiting_message = State()

class CartEditFSM(StatesGroup):
    waiting_action = State()

class ReviewFSM(StatesGroup):
    waiting_rating = State()
    waiting_comment = State()

# =============================================================================
# –ö–õ–ê–í–ò–ê–¢–£–†–´
# =============================================================================

def main_menu_kb(user_id: int = None) -> ReplyKeyboardMarkup:
    kb = ReplyKeyboardBuilder()
    kb.button(text="üì∏ –ö–∞—Ç–∞–ª–æ–≥")
    kb.button(text="üõí –ö–æ—Ä–∑–∏–Ω–∞")
    kb.button(text="üßæ –ú–æ–∏ –∑–∞–∫–∞–∑—ã")
    kb.button(text="‚ùì –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞")
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∞–¥–º–∏–Ω–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    if user_id and user_id in ADMIN_CHAT_IDS:
        kb.button(text="üëë –ê–¥–º–∏–Ω–∫–∞")
    kb.adjust(2, 2)
    return kb.as_markup(resize_keyboard=True)

def back_to_main_kb() -> ReplyKeyboardMarkup:
    kb = ReplyKeyboardBuilder()
    kb.button(text="‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    return kb.as_markup(resize_keyboard=True)

def categories_ikb() -> InlineKeyboardMarkup:
    with get_db_safe() as db:
        if not db:
            return InlineKeyboardMarkup(inline_keyboard=[])
        categories = CategoryRepository.get_all_active(db)
        ib = InlineKeyboardBuilder()
        for category in categories:
            ib.button(text=category.title, callback_data=f"cat:{category.key}")
        ib.adjust(1)
        return ib.as_markup()

def category_products_ikb(cat_key: str, page: int = 0, products_per_page: int = 5) -> InlineKeyboardMarkup:
    with get_db_safe() as db:
        if not db:
            return InlineKeyboardMarkup(inline_keyboard=[])
            
        category = CategoryRepository.get_by_key(db, cat_key)
        if not category:
            return InlineKeyboardMarkup(inline_keyboard=[])

        products = ProductRepository.get_by_category(db, category.id)
        
        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        total_pages = (len(products) + products_per_page - 1) // products_per_page
        start_idx = page * products_per_page
        end_idx = start_idx + products_per_page
        paginated_products = products[start_idx:end_idx]
        
        ib = InlineKeyboardBuilder()
        
        # –¢–æ–≤–∞—Ä—ã —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        for product in paginated_products:
            ib.button(text=f"{product.name} ‚Äî {product.price} ‚ÇΩ", callback_data=f"prod:{product.id}")
        
        # –ù–∞–≤–∏–≥–∞—Ü–∏—è
        nav_buttons = []
        if page > 0:
            nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"cat_page:{cat_key}:{page-1}"))
        
        nav_buttons.append(InlineKeyboardButton(text=f"{page+1}/{total_pages}", callback_data="noop"))
        
        if page < total_pages - 1:
            nav_buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"cat_page:{cat_key}:{page+1}"))
        
        if nav_buttons:
            ib.row(*nav_buttons)
        
        ib.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="back:cats")
        ib.adjust(1)
        return ib.as_markup()

def product_sizes_ikb(product_id: int) -> InlineKeyboardMarkup:
    with get_db_safe() as db:
        if not db:
            return InlineKeyboardMarkup(inline_keyboard=[])
            
        product = ProductRepository.get_by_id(db, product_id)
        if not product:
            return InlineKeyboardMarkup(inline_keyboard=[])

        ib = InlineKeyboardBuilder()
        for size in product.sizes:
            ib.button(text=size, callback_data=f"size:{product.id}:{size}")
        
        # –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç–∑—ã–≤–æ–≤
        reviews = ReviewRepository.get_product_reviews(db, product_id)
        if reviews:
            ib.button(text="‚≠ê –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã", callback_data=f"show_reviews:{product_id}")
            
        ib.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–æ–≤–∞—Ä–∞–º", callback_data=f"back:cat:{product.category.key}")
        ib.adjust(4, 1)
        return ib.as_markup()

def qty_ikb(product_id: int, size: str) -> InlineKeyboardMarkup:
    ib = InlineKeyboardBuilder()
    for q in [1, 2, 3, 4, 5]:
        ib.button(text=str(q), callback_data=f"qty:{product_id}:{size}:{q}")
    ib.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ä–∞–∑–º–µ—Ä–∞–º", callback_data=f"back:size:{product_id}")
    ib.adjust(5, 1)
    return ib.as_markup()

def checkout_delivery_ikb() -> InlineKeyboardMarkup:
    ib = InlineKeyboardBuilder()
    ib.button(text="üì¶ CDEK (–ü–í–ó)", callback_data="delivery:cdek")
    ib.button(text="üöö –ö—É—Ä—å–µ—Ä –¥–æ –¥–≤–µ—Ä–∏", callback_data="delivery:courier")
    ib.adjust(1)
    return ib.as_markup()

def confirm_ikb() -> InlineKeyboardMarkup:
    ib = InlineKeyboardBuilder()
    ib.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="confirm:yes")
    ib.button(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="confirm:edit")
    ib.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="confirm:cancel")
    ib.adjust(1)
    return ib.as_markup()

def cart_actions_ikb() -> InlineKeyboardMarkup:
    ib = InlineKeyboardBuilder()
    ib.button(text="üõí –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="cart:checkout")
    ib.button(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="cart:edit")
    ib.button(text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="cart:clear")
    ib.adjust(1)
    return ib.as_markup()

def cart_edit_ikb(cart_items) -> InlineKeyboardMarkup:
    ib = InlineKeyboardBuilder()
    for item in cart_items:
        if hasattr(item, 'product') and item.product:
            ib.button(
                text=f"‚ùå {item.product.name} - {item.size} √ó {item.quantity}", 
                callback_data=f"remove:{item.id}"
            )
    ib.button(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data="cart:done")
    ib.adjust(1)
    return ib.as_markup()

def orders_list_ikb(orders: list) -> InlineKeyboardMarkup:
    ib = InlineKeyboardBuilder()
    for order in orders:
        status_emoji = "üü°" if order.status == "pending" else "üü¢" if order.status == "confirmed" else "üî¥"
        ib.button(text=f"{status_emoji} –ó–∞–∫–∞–∑ #{order.order_number} - {order.total_amount}‚ÇΩ", 
                 callback_data=f"order:{order.id}")
    ib.button(text="‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back:main")
    ib.adjust(1)
    return ib.as_markup()

def order_actions_ikb(order_id: int, status: str, user_id: int = None) -> InlineKeyboardMarkup:
    ib = InlineKeyboardBuilder()
    if status in ["pending", "confirmed"]:
        ib.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=f"order_cancel:{order_id}")
    
    # –ö–Ω–æ–ø–∫–∞ –æ—Ç–∑—ã–≤–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
    if status == "delivered":
        ib.button(text="‚≠ê –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data=f"order_review:{order_id}")
    
    ib.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∑–∞–∫–∞–∑–∞–º", callback_data="orders:list")
    ib.adjust(1)
    return ib.as_markup()

def rating_ikb(product_id: int, order_id: int) -> InlineKeyboardMarkup:
    ib = InlineKeyboardBuilder()
    for i in range(1, 6):
        ib.button(text="‚≠ê" * i, callback_data=f"review_rating:{product_id}:{order_id}:{i}")
    ib.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="review_cancel")
    ib.adjust(1)
    return ib.as_markup()

def format_cart(user_id: int) -> str:
    with get_db_safe() as db:
        if not db:
            return "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã"
            
        user = db.query(User).filter(User.telegram_id == user_id).first()
        if not user:
            return "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω."

        cart_items = CartRepository.get_user_cart(db, user.id)

        if not cart_items:
            return "üõí *–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞*"

        lines = ["üõí *–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:*"]
        total = 0

        for item in cart_items:
            if hasattr(item, 'product') and item.product:
                line_total = item.product.price * item.quantity
                lines.append(f"‚Ä¢ {item.product.name} ‚Äî {item.size} √ó {item.quantity} = *{line_total} ‚ÇΩ*")
                total += line_total

        lines.append(f"\nüí∞ *–ò—Ç–æ–≥–æ: {total} ‚ÇΩ*")
        return "\n".join(lines)

def format_order(order: Order) -> str:
    order_text = [
        f"üßæ *–ó–∞–∫–∞–∑ #{order.order_number}*",
        f"üìä –°—Ç–∞—Ç—É—Å: {order.status}",
        f"üìÖ –î–∞—Ç–∞: {order.created_at.strftime('%d.%m.%Y %H:%M')}",
        f"üí≥ –°—É–º–º–∞: {order.total_amount} ‚ÇΩ",
        f"üöö –î–æ—Å—Ç–∞–≤–∫–∞: {order.delivery_type}",
        "",
        "*üì¶ –¢–æ–≤–∞—Ä—ã:*"
    ]
    
    for item in order.items:
        order_text.append(f"‚Ä¢ {item.product_name} - {item.size} √ó {item.quantity} = {item.total} ‚ÇΩ")
        
    if order.delivery_type == "cdek":
        delivery_data = order.delivery_address
        order_text.append(f"\n*üìç –î–æ—Å—Ç–∞–≤–∫–∞ CDEK:*")
        order_text.append(f"–ì–æ—Ä–æ–¥: {delivery_data.get('city', '–ù–µ —É–∫–∞–∑–∞–Ω')}")
        order_text.append(f"–ü–í–ó: {delivery_data.get('pvz', '–ù–µ —É–∫–∞–∑–∞–Ω')}")
    else:
        delivery_data = order.delivery_address
        order_text.append(f"\n*üè† –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:*")
        order_text.append(f"{delivery_data.get('address', '–ù–µ —É–∫–∞–∑–∞–Ω')}")
        
    return "\n".join(order_text)

# =============================================================================
# –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–û–¢–ê
# =============================================================================

dp = Dispatcher(storage=MemoryStorage())
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode="Markdown"))

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
@dp.errors()
async def global_error_handler(event: Exception, bot: Bot):
    logger.error(f"Global error: {event}", exc_info=True)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º –æ–± –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–∫–∞—Ö
    error_text = f"üö® Critical error: {str(event)}\n\n{traceback.format_exc()[:1000]}"
    
    for admin_id in ADMIN_CHAT_IDS:
        try:
            await bot.send_message(admin_id, error_text)
        except Exception as e:
            logger.error(f"Failed to notify admin: {e}")

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
register_admin_panel(dp, bot)
register_support(dp, bot)

# =============================================================================
# –û–°–ù–û–í–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò
# =============================================================================

@dp.message(CommandStart())
@safe_db_operation
@rate_limit("message")
async def on_start(message: Message):
    logger.info(f"User {message.from_user.id} started bot")

    with get_db_safe() as db:
        if db:
            UserRepository.get_or_create_user(
                db,
                message.from_user.id,
                message.from_user.username,
                message.from_user.first_name,
                message.from_user.last_name
            )

    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω –æ–¥–µ–∂–¥—ã –≠–º–ø–µ—Ä–∞–¥–æ—Ä!\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        "‚Ä¢ üõçÔ∏è –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Ç–æ–≤–∞—Ä—ã —Å —Ñ–æ—Ç–æ\n"
        "‚Ä¢ üõí –î–æ–±–∞–≤–ª—è—Ç—å —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω—É\n"
        "‚Ä¢ ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ—Ä–∑–∏–Ω—É\n"
        "‚Ä¢ üöö –û—Ñ–æ—Ä–º–ª—è—Ç—å –∑–∞–∫–∞–∑—ã —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π\n"
        "‚Ä¢ üì¶ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–≤–æ–∏ –∑–∞–∫–∞–∑—ã\n"
        "‚Ä¢ ‚ùì –û–±—Ä–∞—â–∞—Ç—å—Å—è –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu_kb(message.from_user.id)
    )

@dp.message(Command("help"))
@safe_db_operation
@rate_limit("message")
async def on_help(message: Message):
    help_text = [
        "‚ÑπÔ∏è *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*",
        "‚Ä¢ /start ‚Äî –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        "‚Ä¢ /catalog ‚Äî –æ—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤",
        "‚Ä¢ /cart ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∫–æ—Ä–∑–∏–Ω—É",
        "‚Ä¢ /orders ‚Äî –º–æ–∏ –∑–∞–∫–∞–∑—ã",
        "‚Ä¢ /support ‚Äî —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞",
        "‚Ä¢ /cancel ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ",
    ]
    
    if message.from_user.id in ADMIN_CHAT_IDS:
        help_text.append("‚Ä¢ /admin ‚Äî –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
    
    help_text.extend([
        "",
        "*üì± –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:*",
        "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–æ–≤–∞—Ä–æ–≤ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏",
        "‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã",
        "‚Ä¢ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã",
        "‚Ä¢ –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ —Å –≤—ã–±–æ—Ä–æ–º –¥–æ—Å—Ç–∞–≤–∫–∏",
        "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤",
        "‚Ä¢ –û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–æ–≤"
    ])
    
    await message.answer("\n".join(help_text), reply_markup=main_menu_kb(message.from_user.id))

# =============================================================================
# –ö–ê–¢–ê–õ–û–ì –ò –¢–û–í–ê–†–´
# =============================================================================

@dp.message(Command("catalog"))
@dp.message(F.text == "üì∏ –ö–∞—Ç–∞–ª–æ–≥")
@safe_db_operation
@rate_limit("message")
async def on_catalog(message: Message):
    await message.answer("üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=categories_ikb())

@dp.callback_query(F.data.startswith("cat:"))
@safe_db_operation
@rate_limit("callback")
async def on_category_select(cb: CallbackQuery):
    category_key = cb.data.split(":")[1]
    await cb.message.answer("üõçÔ∏è –¢–æ–≤–∞—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:", reply_markup=category_products_ikb(category_key))
    await cb.answer()

@dp.callback_query(F.data.startswith("cat_page:"))
@safe_db_operation
@rate_limit("callback")
async def on_category_page(cb: CallbackQuery):
    _, cat_key, page_str = cb.data.split(":")
    page = int(page_str)
    await cb.message.edit_reply_markup(reply_markup=category_products_ikb(cat_key, page))
    await cb.answer()

@dp.callback_query(F.data.startswith("prod:"))
@safe_db_operation
@rate_limit("callback")
async def on_product_select(cb: CallbackQuery):
    product_id = int(cb.data.split(":")[1])

    with get_db_safe() as db:
        if not db:
            await cb.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–∞")
            return
            
        product = ProductRepository.get_by_id(db, product_id)
        if not product:
            await cb.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        description = [
            f"üéØ *{product.name}*",
            f"üí∞ –¶–µ–Ω–∞: {product.price} ‚ÇΩ",
            f"üìù {product.description}",
            f"üìè –†–∞–∑–º–µ—Ä—ã: {', '.join(product.sizes)}",
            "",
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä:"
        ]

        try:
            if product.images:
                with open(product.images[0], 'rb') as photo:
                    await cb.message.answer_photo(
                        photo=photo,
                        caption="\n".join(description),
                        reply_markup=product_sizes_ikb(product.id),
                        parse_mode="Markdown"
                    )
                
                for img_path in product.images[1:]:
                    try:
                        with open(img_path, 'rb') as additional_photo:
                            await cb.message.answer_photo(photo=additional_photo)
                    except Exception as e:
                        logger.error(f"Error sending additional image {img_path}: {e}")
                        
            else:
                await cb.message.answer(
                    "\n".join(description),
                    reply_markup=product_sizes_ikb(product.id),
                    parse_mode="Markdown"
                )
        except Exception as e:
            logger.error(f"Error showing product image: {e}")
            await cb.message.answer(
                "üì∑ " + "\n".join(description),
                reply_markup=product_sizes_ikb(product.id),
                parse_mode="Markdown"
            )

    await cb.answer()

@dp.callback_query(F.data.startswith("size:"))
@safe_db_operation
@rate_limit("callback")
async def on_size_select(cb: CallbackQuery):
    _, product_id, size = cb.data.split(":")
    await cb.message.answer(f"üî¢ –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è —Ä–∞–∑–º–µ—Ä–∞ {size}:",
                           reply_markup=qty_ikb(int(product_id), size))
    await cb.answer()

@dp.callback_query(F.data.startswith("qty:"))
@safe_db_operation
@rate_limit("callback")
async def on_qty(cb: CallbackQuery):
    _, product_id, size, qty_str = cb.data.split(":")
    qty = int(qty_str)

    product_name = None
    product_price = None
    
    with get_db_safe() as db:
        if not db:
            await cb.answer("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É")
            return
            
        product = ProductRepository.get_by_id(db, int(product_id))
        if not product:
            await cb.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        product_name = product.name
        product_price = product.price

        user = UserRepository.get_or_create_user(
            db,
            cb.from_user.id,
            cb.from_user.username,
            cb.from_user.first_name,
            cb.from_user.last_name
        )

        CartRepository.add_to_cart(db, user.id, product.id, size, qty)

    cart_text = format_cart(cb.from_user.id)
    await cb.message.answer(
        f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {product_name} ‚Äî {size} √ó {qty} = *{product_price * qty} ‚ÇΩ*\n\n{cart_text}",
        reply_markup=main_menu_kb(cb.from_user.id)
    )
    await cb.answer("üì¶ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É!")

# =============================================================================
# ‚≠ê –°–ò–°–¢–ï–ú–ê –û–¢–ó–´–í–û–í
# =============================================================================

@dp.callback_query(F.data.startswith("show_reviews:"))
@safe_db_operation
@rate_limit("callback")
async def show_product_reviews(cb: CallbackQuery):
    product_id = int(cb.data.split(":")[1])
    
    with get_db_safe() as db:
        if not db:
            await cb.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–∑—ã–≤–æ–≤")
            return
            
        product = ProductRepository.get_by_id(db, product_id)
        reviews = ReviewRepository.get_product_reviews(db, product_id)
    
    if not reviews:
        await cb.answer("üòî –û—Ç–∑—ã–≤–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç", show_alert=True)
        return
    
    avg_rating = sum(r.rating for r in reviews) / len(reviews)
    
    text = [f"‚≠ê –û—Ç–∑—ã–≤—ã –æ {product.name} (—Å—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: {avg_rating:.1f}/5):"]
    
    for review in reviews[:5]:
        user_name = review.user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        text.append(f"\n‚≠ê {review.rating}/5 –æ—Ç {user_name}")
        if review.comment:
            text.append(f"üí¨ {review.comment}")
    
    await cb.message.answer("\n".join(text))
    await cb.answer()

@dp.callback_query(F.data.startswith("order_review:"))
@safe_db_operation
@rate_limit("callback")
async def on_order_review(cb: CallbackQuery, state: FSMContext):
    order_id = int(cb.data.split(":")[1])
    
    with get_db_safe() as db:
        if not db:
            await cb.answer("‚ùå –û—à–∏–±–∫–∞")
            return
            
        order = OrderRepository.get_order_by_id(db, order_id)
        if not order or order.status != "delivered":
            await cb.answer("‚ùå –ù–µ–ª—å–∑—è –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞")
            return
        
        ib = InlineKeyboardBuilder()
        for item in order.items:
            ib.button(text=f"‚≠ê {item.product_name}", 
                     callback_data=f"leave_review:{item.product_id}:{order_id}")
        
        ib.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"order:{order_id}")
        ib.adjust(1)
        
        await cb.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –æ—Ç–∑—ã–≤–∞:",
            reply_markup=ib.as_markup()
        )
    
    await cb.answer()

@dp.callback_query(F.data.startswith("leave_review:"))
@safe_db_operation
@rate_limit("callback")
async def start_review(cb: CallbackQuery, state: FSMContext):
    product_id = int(cb.data.split(":")[1])
    order_id = int(cb.data.split(":")[2])
    
    with get_db_safe() as db:
        if not db:
            await cb.answer("‚ùå –û—à–∏–±–∫–∞")
            return
            
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
        user = UserRepository.get_or_create_user(
            db,
            cb.from_user.id,
            cb.from_user.username,
            cb.from_user.first_name,
            cb.from_user.last_name
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞
        order = OrderRepository.get_order_by_id(db, order_id)
        if not order or order.user_id != user.id or order.status != "delivered":
            await cb.answer("‚ùå –ù–µ–ª—å–∑—è –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞")
            return
            
        product = ProductRepository.get_by_id(db, product_id)
        if not product:
            await cb.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
    
    await state.update_data(
        product_id=product_id, 
        order_id=order_id,
        user_id=user.id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
    )
    await state.set_state(ReviewFSM.waiting_rating)
    
    await cb.message.answer(
        f"üí¨ –û—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤ –æ —Ç–æ–≤–∞—Ä–µ: {product.name}\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ü–µ–Ω–∫—É:",
        reply_markup=rating_ikb(product_id, order_id)
    )
    await cb.answer()

@dp.callback_query(ReviewFSM.waiting_rating, F.data.startswith("review_rating:"))
@safe_db_operation
@rate_limit("callback")
async def on_rating_select(cb: CallbackQuery, state: FSMContext):
    rating = int(cb.data.split(":")[3])
    await state.update_data(rating=rating)
    await state.set_state(ReviewFSM.waiting_comment)
    
    await cb.message.edit_text(
        f"‚≠ê –í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞: {rating}/5\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –æ—Ç–∑—ã–≤—É (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):"
    )
    await cb.answer()

@dp.callback_query(ReviewFSM.waiting_rating, F.data == "review_cancel")
@safe_db_operation
@rate_limit("callback")
async def on_review_cancel(cb: CallbackQuery, state: FSMContext):
    await state.clear()
    await cb.message.edit_text("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–∑—ã–≤–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    await cb.answer()

@dp.message(ReviewFSM.waiting_comment)
@safe_db_operation
@rate_limit("message")
async def on_review_comment(message: Message, state: FSMContext):
    data = await state.get_data()
    comment = message.text if message.text != "-" else ""
    
    with get_db_safe() as db:
        if not db:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞")
            await state.clear()
            return
            
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = UserRepository.get_or_create_user(
            db,
            message.from_user.id,
            message.from_user.username,
            message.from_user.first_name,
            message.from_user.last_name
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –∏ —Ç–æ–≤–∞—Ä–∞
        order = OrderRepository.get_order_by_id(db, data['order_id'])
        product = ProductRepository.get_by_id(db, data['product_id'])
        
        if not order or not product:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –∑–∞–∫–∞–∑ –∏–ª–∏ —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await state.clear()
            return
            
        # –°–æ–∑–¥–∞–µ–º –æ—Ç–∑–æ–≤
        ReviewRepository.create_review(
            db, user.id, data['product_id'], 
            data['order_id'], data['rating'], comment
        )
    
    await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!", reply_markup=main_menu_kb(message.from_user.id))
    await state.clear()

# =============================================================================
# –ö–û–†–ó–ò–ù–ê
# =============================================================================

@dp.message(Command("cart"))
@dp.message(F.text == "üõí –ö–æ—Ä–∑–∏–Ω–∞")
@safe_db_operation
@rate_limit("message")
async def on_cart(message: Message):
    cart_text = format_cart(message.from_user.id)
    if "–ø—É—Å—Ç–∞" in cart_text:
        await message.answer(cart_text)
    else:
        await message.answer(cart_text, reply_markup=cart_actions_ikb())

@dp.callback_query(F.data.startswith("cart:"))
@safe_db_operation
@rate_limit("callback")
async def on_cart_action(cb: CallbackQuery, state: FSMContext):
    action = cb.data.split(":")[1]
    
    if action == "checkout":
        cart_text = format_cart(cb.from_user.id)
        if "–ø—É—Å—Ç–∞" in cart_text:
            await cb.answer("üõí –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!")
            return
            
        await cb.message.answer("üë§ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")
        await state.set_state(OrderFSM.waiting_fullname)
        
    elif action == "clear":
        with get_db_safe() as db:
            if db:
                user = UserRepository.get_or_create_user(
                    db,
                    cb.from_user.id,
                    cb.from_user.username,
                    cb.from_user.first_name,
                    cb.from_user.last_name
                )
                CartRepository.clear_cart(db, user.id)
            
        await cb.message.answer("‚úÖ –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞!", reply_markup=main_menu_kb(cb.from_user.id))
        
    elif action == "edit":
        with get_db_safe() as db:
            if db:
                user = UserRepository.get_or_create_user(
                    db,
                    cb.from_user.id,
                    cb.from_user.username,
                    cb.from_user.first_name,
                    cb.from_user.last_name
                )
                cart_items = CartRepository.get_user_cart(db, user.id)
                
                if not cart_items:
                    await cb.answer("üõí –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!")
                    return
                    
                await cb.message.answer(
                    "‚úèÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
                    reply_markup=cart_edit_ikb(cart_items)
                )
    
    await cb.answer()

@dp.callback_query(F.data.startswith("remove:"))
@safe_db_operation
@rate_limit("callback")
async def on_remove_item(cb: CallbackQuery):
    cart_item_id = int(cb.data.split(":")[1])
    
    with get_db_safe() as db:
        if db:
            cart_item = db.query(CartItem).filter(CartItem.id == cart_item_id).first()
            if cart_item:
                db.delete(cart_item)
                db.commit()
                
                user = UserRepository.get_or_create_user(
                    db,
                    cb.from_user.id,
                    cb.from_user.username,
                    cb.from_user.first_name,
                    cb.from_user.last_name
                )
                cart_items = CartRepository.get_user_cart(db, user.id)
                
                if cart_items:
                    await cb.message.edit_text(
                        "‚úÖ –¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —Ç–æ–≤–∞—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
                        reply_markup=cart_edit_ikb(cart_items)
                    )
                else:
                    await cb.message.edit_text("‚úÖ –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞!", reply_markup=main_menu_kb(cb.from_user.id))
            else:
                await cb.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    await cb.answer()

@dp.callback_query(F.data == "cart:done")
@safe_db_operation
@rate_limit("callback")
async def on_cart_edit_done(cb: CallbackQuery):
    await cb.message.edit_text("‚úÖ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã –∑–∞–≤–µ—Ä—à–µ–Ω–æ!", reply_markup=main_menu_kb(cb.from_user.id))
    await cb.answer()

# =============================================================================
# –ó–ê–ö–ê–ó–´
# =============================================================================

@dp.message(Command("orders"))
@dp.message(F.text == "üßæ –ú–æ–∏ –∑–∞–∫–∞–∑—ã")
@safe_db_operation
@rate_limit("message")
async def on_orders(message: Message):
    with get_db_safe() as db:
        if not db:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤")
            return
            
        user = UserRepository.get_or_create_user(
            db,
            message.from_user.id,
            message.from_user.username,
            message.from_user.first_name,
            message.from_user.last_name
        )
        
        orders = OrderRepository.get_user_orders(db, user.id)
        
        if not orders:
            await message.answer("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.", reply_markup=main_menu_kb(message.from_user.id))
            return
            
        await message.answer("üìã –í–∞—à–∏ –∑–∞–∫–∞–∑—ã:", reply_markup=orders_list_ikb(orders))

@dp.callback_query(F.data.startswith("order:"))
@safe_db_operation
@rate_limit("callback")
async def on_order_detail(cb: CallbackQuery):
    order_id = int(cb.data.split(":")[1])
    
    with get_db_safe() as db:
        if not db:
            await cb.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–∞")
            return
            
        order = OrderRepository.get_order_by_id(db, order_id)
        if not order:
            await cb.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        await cb.message.answer(format_order(order), reply_markup=order_actions_ikb(order.id, order.status, cb.from_user.id))
    
    await cb.answer()

@dp.callback_query(F.data.startswith("order_cancel:"))
@safe_db_operation
@rate_limit("callback")
async def on_order_cancel(cb: CallbackQuery):
    order_id = int(cb.data.split(":")[1])
    
    with get_db_safe() as db:
        if not db:
            await cb.answer("‚ùå –û—à–∏–±–∫–∞")
            return
            
        order = OrderRepository.get_order_by_id(db, order_id)
        if not order:
            await cb.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        if order.status not in ["pending", "confirmed"]:
            await cb.answer("‚ùå –ù–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ –≤ —Ç–µ–∫—É—â–µ–º —Å—Ç–∞—Ç—É—Å–µ")
            return
            
        OrderRepository.cancel_order(db, order_id)
        
        await cb.message.edit_text(
            f"‚úÖ –ó–∞–∫–∞–∑ #{order.order_number} –æ—Ç–º–µ–Ω–µ–Ω!\n\n{format_order(order)}",
            reply_markup=order_actions_ikb(order.id, "cancelled", cb.from_user.id)
        )
    
    await cb.answer()

# =============================================================================
# –¢–ï–•–ü–û–î–î–ï–†–ñ–ö–ê
# =============================================================================

@dp.message(Command("support"))
@dp.message(F.text == "‚ùì –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞")
@safe_db_operation
@rate_limit("message")
async def on_support(message: Message, state: FSMContext):
    await message.answer(
        "üí¨ –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É. –ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è:",
        reply_markup=back_to_main_kb()
    )
    await state.set_state(SupportFSM.waiting_message)

@dp.message(SupportFSM.waiting_message)
@safe_db_operation
@rate_limit("support")
async def on_support_message(message: Message, state: FSMContext):
    support_message = message.text
    
    with get_db_safe() as db:
        if db:
            user = UserRepository.get_or_create_user(
                db,
                message.from_user.id,
                message.from_user.username,
                message.from_user.first_name,
                message.from_user.last_name
            )
            
            ticket = TicketRepository.create_ticket(db, user.id, support_message)
    
    logger.info(f"Support request from {message.from_user.id}: {support_message}")
    
    user_mention = mention_user(
        message.from_user.id,
        message.from_user.username,
        message.from_user.first_name,
        message.from_user.last_name
    )
    
    admin_message = (
        f"üÜò *–ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É!*\n"
        f"üé´ ID: #{ticket.id}\n"
        f"üë§ –û—Ç: {user_mention}\n"
        f"üìÖ –î–∞—Ç–∞: {ticket.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
        f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ:\n{support_message}"
    )
    
    for admin_id in ADMIN_CHAT_IDS:
        try:
            await bot.send_message(
                admin_id,
                admin_message,
                parse_mode="Markdown"
            )
        except Exception as e:
            logger.error(f"Error sending to admin {admin_id}: {e}")
    
    await message.answer(
        f"‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É. –ù–æ–º–µ—Ä –≤–∞—à–µ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è: #{ticket.id}\n"
        "–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
        reply_markup=main_menu_kb(message.from_user.id)
    )
    await state.clear()

# =============================================================================
# –û–§–û–†–ú–õ–ï–ù–ò–ï –ó–ê–ö–ê–ó–ê –° –í–ê–õ–ò–î–ê–¶–ò–ï–ô
# =============================================================================

@dp.message(Command("checkout"))
@safe_db_operation
@rate_limit("message")
async def on_checkout(message: Message, state: FSMContext):
    cart_text = format_cart(message.from_user.id)
    if "–ø—É—Å—Ç–∞" in cart_text:
        await message.answer("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –ø–µ—Ä–µ–¥ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º –∑–∞–∫–∞–∑–∞.")
        return

    await message.answer("üë§ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")
    await state.set_state(OrderFSM.waiting_fullname)

@dp.message(OrderFSM.waiting_fullname)
@safe_db_operation
@rate_limit("message")
async def on_fullname(message: Message, state: FSMContext):
    is_valid, result = OrderValidation.validate_fullname(message.text)
    if not is_valid:
        await message.answer(f"‚ùå {result}\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –§–ò–û –µ—â–µ —Ä–∞–∑:")
        return
        
    await state.update_data(fullname=result)
    await message.answer("üìû –í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω:")
    await state.set_state(OrderFSM.waiting_phone)

@dp.message(OrderFSM.waiting_phone)
@safe_db_operation
@rate_limit("message")
async def on_phone(message: Message, state: FSMContext):
    data = await state.get_data()
    is_valid, result = OrderValidation.validate_phone(message.text)
    if not is_valid:
        await message.answer(f"‚ùå {result}\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –µ—â–µ —Ä–∞–∑:")
        return
        
    await state.update_data(phone=result)
    await message.answer("üöö –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏:", reply_markup=checkout_delivery_ikb())
    await state.set_state(OrderFSM.waiting_delivery_type)

@dp.callback_query(OrderFSM.waiting_delivery_type, F.data.startswith("delivery:"))
@safe_db_operation
@rate_limit("callback")
async def on_delivery_type(cb: CallbackQuery, state: FSMContext):
    delivery_type = cb.data.split(":")[1]
    is_valid, result = OrderValidation.validate_delivery_type(delivery_type)
    if not is_valid:
        await cb.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏")
        return
        
    await state.update_data(delivery_type=result)

    if delivery_type == "cdek":
        await cb.message.answer("üèôÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ü–í–ó CDEK:")
        await state.set_state(OrderFSM.waiting_cdek_city)
    else:
        await cb.message.answer("üè† –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:")
        await state.set_state(OrderFSM.waiting_address)

    await cb.answer()

@dp.message(OrderFSM.waiting_cdek_city)
@safe_db_operation
@rate_limit("message")
async def on_cdek_city(message: Message, state: FSMContext):
    await state.update_data(cdek_city=message.text)
    await message.answer("üìç –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ü–í–ó CDEK:")
    await state.set_state(OrderFSM.waiting_cdek_pvz)

@dp.message(OrderFSM.waiting_cdek_pvz)
@safe_db_operation
@rate_limit("message")
async def on_cdek_pvz(message: Message, state: FSMContext):
    await state.update_data(cdek_pvz=message.text)

    data = await state.get_data()
    delivery_info = f"üèôÔ∏è –ì–æ—Ä–æ–¥: {data['cdek_city']}\nüìç –ü–í–ó: {data['cdek_pvz']}"

    await message.answer(
        f"üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∞–≤–∫–∏:\n{delivery_info}\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑?",
        reply_markup=confirm_ikb()
    )
    await state.set_state(OrderFSM.confirm)

@dp.message(OrderFSM.waiting_address)
@safe_db_operation
@rate_limit("message")
async def on_address(message: Message, state: FSMContext):
    await state.update_data(address=message.text)

    data = await state.get_data()
    await message.answer(
        f"üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:\n{data['address']}\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑?",
        reply_markup=confirm_ikb()
    )
    await state.set_state(OrderFSM.confirm)

@dp.callback_query(OrderFSM.confirm, F.data == "confirm:yes")
@safe_db_operation
@rate_limit("callback")
async def confirm_order(cb: CallbackQuery, state: FSMContext):
    data = await state.get_data()

    with get_db_safe() as db:
        if not db:
            await state.clear()
            await cb.message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞", reply_markup=main_menu_kb(cb.from_user.id))
            await cb.answer()
            return
            
        user = UserRepository.get_or_create_user(
            db,
            cb.from_user.id,
            cb.from_user.username,
            cb.from_user.first_name,
            cb.from_user.last_name
        )

        cart_items = CartRepository.get_user_cart(db, user.id)
        if not cart_items:
            await state.clear()
            await cb.message.answer("üõí –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –ù–µ—á–µ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—Ç—å.", reply_markup=main_menu_kb(cb.from_user.id))
            await cb.answer()
            return

        delivery_data = {}
        if data.get("delivery_type") == "cdek":
            delivery_data = {
                "city": data.get("cdek_city"),
                "pvz": data.get("cdek_pvz")
            }
        else:
            delivery_data = {
                "address": data.get("address")
            }

        try:
            order = OrderRepository.create_order(
                db, user.id, cart_items,
                data.get("fullname"), data.get("phone"),
                data.get("delivery_type"), delivery_data
            )

            await cb.message.answer(
                "‚úÖ –ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π. –°–ø–∞—Å–∏–±–æ!",
                reply_markup=main_menu_kb(cb.from_user.id)
            )
            
        except Exception as e:
            logger.error(f"Error creating order: {e}")
            await cb.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    await state.clear()
    await cb.answer()

@dp.callback_query(OrderFSM.confirm, F.data == "confirm:cancel")
@safe_db_operation
@rate_limit("callback")
async def cancel_order(cb: CallbackQuery, state: FSMContext):
    await state.clear()
    await cb.message.answer("‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω.", reply_markup=main_menu_kb(cb.from_user.id))
    await cb.answer()

# =============================================================================
# –ù–ê–í–ò–ì–ê–¶–ò–Ø –ò –û–¢–ú–ï–ù–ê
# =============================================================================

@dp.message(Command("cancel"))
@safe_db_operation
@rate_limit("message")
async def cancel_handler(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return

    await state.clear()
    await message.answer("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu_kb(message.from_user.id))

@dp.callback_query(F.data.startswith("back:"))
@safe_db_operation
@rate_limit("callback")
async def on_back(cb: CallbackQuery):
    back_type = cb.data.split(":")[1]

    if back_type == "cats":
        await cb.message.answer("üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=categories_ikb())
    elif back_type == "cat":
        category_key = cb.data.split(":")[2]
        await cb.message.answer("üõçÔ∏è –¢–æ–≤–∞—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:", reply_markup=category_products_ikb(category_key))
    elif back_type == "size":
        product_id = int(cb.data.split(":")[2])
        await cb.message.answer("üìè –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä:", reply_markup=product_sizes_ikb(product_id))
    elif back_type == "main":
        await cb.message.answer("üì± –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_kb(cb.from_user.id))

@dp.callback_query(F.data == "orders:list")
@safe_db_operation
@rate_limit("callback")
async def on_back_to_orders(cb: CallbackQuery):
    with get_db_safe() as db:
        if not db:
            await cb.answer("‚ùå –û—à–∏–±–∫–∞")
            return
            
        user = UserRepository.get_or_create_user(
            db,
            cb.from_user.id,
            cb.from_user.username,
            cb.from_user.first_name,
            cb.from_user.last_name
        )
        
        orders = OrderRepository.get_user_orders(db, user.id)
        
        if not orders:
            await cb.message.answer("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.", reply_markup=main_menu_kb(cb.from_user.id))
            return
            
        await cb.message.answer("üìã –í–∞—à–∏ –∑–∞–∫–∞–∑—ã:", reply_markup=orders_list_ikb(orders))
    
    await cb.answer()

# =============================================================================
# –ó–ê–ü–£–°–ö –ë–û–¢–ê
# =============================================================================

async def main():
    logger.info("Bot starting...")
    try:
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"Bot stopped with error: {e}")
        raise

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        print("Bot stopped.")