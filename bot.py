import asyncio
import json
import os
from collections import defaultdict
from dataclasses import dataclass, asdict
from datetime import datetime
from typing import List, Dict

from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import (
    Message, CallbackQuery,
    InlineKeyboardMarkup, InlineKeyboardButton,
    ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove,
    FSInputFile
)
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from dotenv import load_dotenv

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN", "")
ADMIN_CHAT_IDS_RAW = os.getenv("ADMIN_CHAT_IDS", "").strip()
ADMIN_CHAT_IDS = []
if ADMIN_CHAT_IDS_RAW:
    for x in ADMIN_CHAT_IDS_RAW.split(","):
        x = x.strip()
        if not x:
            continue
        try:
            ADMIN_CHAT_IDS.append(int(x))
        except ValueError:
            pass

if not BOT_TOKEN:
    raise RuntimeError("–ù–µ —É–∫–∞–∑–∞–Ω BOT_TOKEN –≤ .env")
if not ADMIN_CHAT_IDS:
    print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ù–µ —É–∫–∞–∑–∞–Ω—ã ADMIN_CHAT_IDS –≤ .env. –ó–∞–∫–∞–∑—ã –Ω–µ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –∞–¥–º–∏–Ω–∞–º!")
CATALOG: Dict[str, Dict] = {
    "women": {
        "title": "üëó –ñ–µ–Ω—Å–∫–∞—è –æ–¥–µ–∂–¥–∞",
        "collage_path": "media/women_collage.jpg", 
        "products": [
            {"id": "w001", "name": "–õ–µ–≥–∏–Ω—Å—ã –º—Ä–∞–º–æ—Ä", "price": 3490, "sizes": ["XS", "S", "M", "L"]},
            {"id": "w002", "name": "–ë–ª—É–∑–∞ –º—Ä–∞–º–æ—Ä", "price": 1990, "sizes": ["S", "M", "L", "XL"]},
        ]
    },
    "men": {
        "title": "üß• –ú—É–∂—Å–∫–∞—è –æ–¥–µ–∂–¥–∞",
        "collage_path": "media/men_collage.jpg",
        "products": [
            {"id": "m001", "name": "–§—É—Ç–±–æ–ª–∫–∞", "price": 2990, "sizes": ["S", "M", "L", "XL"]},
            {"id": "m002", "name": "–•—É–¥–∏", "price": 4490, "sizes": ["30", "31", "32", "33", "34"]},
        ]
    },
    "acc": {
        "title": "üß¢ –ê–∫—Å–µ—Å—Å—É–∞—Ä—ã",
        "collage_path": "media/acc_collage.jpg",
        "products": [
            {"id": "a001", "name": "–ö–µ–ø–∫–∞", "price": 1290, "sizes": ["one size"]},
            {"id": "a002", "name": "–®–∞–ø–∫–∞", "price": 2590, "sizes": ["S", "M", "L"]},
        ]
    }
}

@dataclass
class CartItem:
    product_id: str
    name: str
    size: str
    price: int
    qty: int

    @property
    def total(self) -> int:
        return self.price * self.qty

CARTS: Dict[int, List[CartItem]] = defaultdict(list)

class OrderFSM(StatesGroup):
    waiting_fullname = State()
    waiting_phone = State()
    waiting_delivery_type = State() 
    waiting_cdek_city = State()
    waiting_cdek_pvz = State()
    waiting_address = State()
    confirm = State()

def main_menu_kb() -> ReplyKeyboardMarkup:
    kb = ReplyKeyboardBuilder()
    kb.button(text="üì∏ –ö–∞—Ç–∞–ª–æ–≥")
    kb.button(text="üõí –ö–æ—Ä–∑–∏–Ω–∞")
    kb.button(text="üßæ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑")
    kb.button(text="‚ùì –ü–æ–º–æ—â—å")
    kb.adjust(2, 2)
    return kb.as_markup(resize_keyboard=True)

def categories_ikb() -> InlineKeyboardMarkup:
    ib = InlineKeyboardBuilder()
    ib.button(text=CATALOG["women"]["title"], callback_data="cat:women")
    ib.button(text=CATALOG["men"]["title"], callback_data="cat:men")
    ib.button(text=CATALOG["acc"]["title"], callback_data="cat:acc")
    ib.adjust(1)
    return ib.as_markup()

def category_products_ikb(cat_key: str) -> InlineKeyboardMarkup:
    ib = InlineKeyboardBuilder()
    for p in CATALOG[cat_key]["products"]:
        ib.button(text=f"{p['name']} ‚Äî {p['price']} ‚ÇΩ", callback_data=f"prod:{cat_key}:{p['id']}")
    ib.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="back:cats")
    ib.adjust(1)
    return ib.as_markup()

def product_sizes_ikb(cat_key: str, product_id: str) -> InlineKeyboardMarkup:
    product = find_product(cat_key, product_id)
    ib = InlineKeyboardBuilder()
    for s in product["sizes"]:
        ib.button(text=s, callback_data=f"size:{cat_key}:{product_id}:{s}")
    ib.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–æ–≤–∞—Ä–∞–º", callback_data=f"back:cat:{cat_key}")
    ib.adjust(4, 1)
    return ib.as_markup()

def qty_ikb(cat_key: str, product_id: str, size: str) -> InlineKeyboardMarkup:
    ib = InlineKeyboardBuilder()
    for q in [1, 2, 3, 4, 5]:
        ib.button(text=str(q), callback_data=f"qty:{cat_key}:{product_id}:{size}:{q}")
    ib.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ä–∞–∑–º–µ—Ä–∞–º", callback_data=f"back:size:{cat_key}:{product_id}")
    ib.adjust(5, 1)
    return ib.as_markup()

def checkout_delivery_ikb() -> InlineKeyboardMarkup:
    ib = InlineKeyboardBuilder()
    ib.button(text="üì¶ CDEK (–ü–í–ó)", callback_data="delivery:cdek")
    ib.button(text="üöö –ö—É—Ä—å–µ—Ä –¥–æ –¥–≤–µ—Ä–∏", callback_data="delivery:courier")
    ib.adjust(1)
    return ib.as_markup()

def confirm_ikb() -> InlineKeyboardMarkup:
    ib = InlineKeyboardBuilder()
    ib.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="confirm:yes")
    ib.button(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å", callback_data="confirm:edit_address")
    ib.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="confirm:cancel")
    ib.adjust(1)
    return ib.as_markup()

def find_product(cat_key: str, product_id: str) -> Dict:
    for p in CATALOG[cat_key]["products"]:
        if p["id"] == product_id:
            return p
    raise KeyError("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")

def format_cart(user_id: int) -> str:
    items = CARTS[user_id]
    if not items:
        return "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞."
    lines = ["üõí *–ö–æ—Ä–∑–∏–Ω–∞:*"]
    total = 0
    for it in items:
        lines.append(f"‚Ä¢ {it.name} ‚Äî {it.size} √ó {it.qty} = *{it.total} ‚ÇΩ*")
        total += it.total
    lines.append(f"\n–ò—Ç–æ–≥–æ: *{total} ‚ÇΩ*")
    return "\n".join(lines)

def empty_cart(user_id: int):
    CARTS[user_id].clear()

def save_order(order: dict):
    path = "orders.json"
    data = []
    if os.path.exists(path):
        try:
            with open(path, "r", encoding="utf-8") as f:
                data = json.load(f)
        except Exception:
            data = []
    data.append(order)
    with open(path, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

async def notify_admins(bot: Bot, order: dict):
    text_lines = [
        "üÜï *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!*",
        f"–î–∞—Ç–∞/–≤—Ä–µ–º—è: {order.get('created_at')}",
        f"–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {order.get('fullname')}",
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {order.get('phone')}",
        "",
        "–¢–æ–≤–∞—Ä—ã:"
    ]
    for it in order.get("items", []):
        text_lines.append(f"‚Ä¢ {it['name']} ‚Äî {it['size']} √ó {it['qty']} = {it['total']} ‚ÇΩ")
    text_lines.append(f"\n–ò—Ç–æ–≥–æ: *{order.get('total')} ‚ÇΩ*")
    text_lines.append("")
    text_lines.append(f"–î–æ—Å—Ç–∞–≤–∫–∞: {order.get('delivery_type_title')}")
    if order.get("delivery_type") == "cdek":
        text_lines.append(f"–ì–æ—Ä–æ–¥ (CDEK): {order.get('cdek_city')}")
        text_lines.append(f"–ü–í–ó (–∫–æ–¥/–∞–¥—Ä–µ—Å): {order.get('cdek_pvz')}")
    else:
        text_lines.append(f"–ê–¥—Ä–µ—Å: {order.get('address')}")
    text_lines.append(f"\nUser ID: {order.get('user_id')}")
    payload = "\n".join(text_lines)

    for chat_id in ADMIN_CHAT_IDS:
        try:
            await bot.send_message(chat_id, payload, parse_mode="Markdown")
        except Exception:
            pass

dp = Dispatcher(storage=MemoryStorage())
bot = Bot(token=BOT_TOKEN, parse_mode="Markdown")

@dp.message(CommandStart())
async def on_start(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –¥–ª—è –∑–∞–∫–∞–∑–æ–≤ –æ–¥–µ–∂–¥—ã –≠–º–ø–µ—Ä–∞–¥–æ—Ä.\n\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu_kb()
    )

@dp.message(Command("help"))
@dp.message(F.text == "‚ùì –ü–æ–º–æ—â—å")
async def on_help(message: Message):
    await message.answer(
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /start ‚Äî –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "‚Ä¢ /catalog ‚Äî –æ—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥\n"
        "‚Ä¢ /cart ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∫–æ—Ä–∑–∏–Ω—É\n"
        "‚Ä¢ /checkout ‚Äî –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑\n"
        "‚Ä¢ /cancel ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ\n"
    )

@dp.message(Command("cancel"))
async def on_cancel_cmd(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–û–∫, –æ—Ç–º–µ–Ω–∏–ª —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ.", reply_markup=main_menu_kb())

@dp.message(Command("catalog"))
@dp.message(F.text == "üì∏ –ö–∞—Ç–∞–ª–æ–≥")
async def on_catalog(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=ReplyKeyboardRemove())
    await message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:", reply_markup=ReplyKeyboardRemove())
    await message.answer(" ", reply_markup=ReplyKeyboardRemove(), reply_markup=None)
    await message.answer("‚Üì –ù–∞–∂–º–∏ –Ω–∞ –Ω—É–∂–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é", reply_markup=categories_ikb())


@dp.callback_query(F.data == "back:cats")
async def back_to_cats(cb: CallbackQuery):
    await cb.message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:", reply_markup=categories_ikb())
    await cb.answer()

@dp.callback_query(F.data.startswith("back:cat:"))
async def back_to_category(cb: CallbackQuery):
    _, _, cat_key = cb.data.split(":")
    await cb.message.answer(
        "–í—ã–±–µ—Ä–∏ —Ç–æ–≤–∞—Ä:",
        reply_markup=category_products_ikb(cat_key)
    )
    await cb.answer()

@dp.callback_query(F.data.startswith("prod:"))
async def on_product(cb: CallbackQuery):
    _, cat_key, product_id = cb.data.split(":")
    product = find_product(cat_key, product_id)
    text = f"*{product['name']}*\n–¶–µ–Ω–∞: *{product['price']} ‚ÇΩ*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä:"
    await cb.message.answer(text, reply_markup=product_sizes_ikb(cat_key, product_id))
    await cb.answer()

@dp.callback_query(F.data.startswith("back:size:"))
async def back_to_sizes(cb: CallbackQuery):
    _, _, cat_key, product_id = cb.data.split(":")
    product = find_product(cat_key, product_id)
    await cb.message.answer(
        f"*{product['name']}* ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä:",
        reply_markup=product_sizes_ikb(cat_key, product_id)
    )
    await cb.answer()

@dp.callback_query(F.data.startswith("size:"))
async def on_size(cb: CallbackQuery):
    _, cat_key, product_id, size = cb.data.split(":")
    product = find_product(cat_key, product_id)
    await cb.message.answer(
        f"{product['name']} ‚Äî —Ä–∞–∑–º–µ—Ä *{size}*\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:",
        reply_markup=qty_ikb(cat_key, product_id, size)
    )
    await cb.answer()

@dp.callback_query(F.data.startswith("qty:"))
async def on_qty(cb: CallbackQuery):
    _, cat_key, product_id, size, qty_str = cb.data.split(":")
    qty = int(qty_str)
    product = find_product(cat_key, product_id)
    item = CartItem(
        product_id=product_id,
        name=product["name"],
        size=size,
        price=product["price"],
        qty=qty
    )
    CARTS[cb.from_user.id].append(item)
    await cb.message.answer(
        f"–î–æ–±–∞–≤–ª–µ–Ω–æ: {item.name} ‚Äî {item.size} √ó {item.qty} = *{item.total} ‚ÇΩ*\n\n{format_cart(cb.from_user.id)}",
        reply_markup=main_menu_kb()
    )
    await cb.answer("–í –∫–æ—Ä–∑–∏–Ω–µ!")

@dp.message(Command("cart"))
@dp.message(F.text == "üõí –ö–æ—Ä–∑–∏–Ω–∞")
async def on_cart(message: Message):
    await message.answer(format_cart(message.from_user.id))

@dp.message(Command("checkout"))
@dp.message(F.text == "üßæ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑")
async def on_checkout(message: Message, state: FSMContext):
    if not CARTS[message.from_user.id]:
        await message.answer("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –ø–µ—Ä–µ–¥ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º.", reply_markup=main_menu_kb())
        return
    await message.answer("–í–≤–µ–¥–∏—Ç–µ *–§–ò–û* –ø–æ–ª–Ω–æ—Å—Ç—å—é:", reply_markup=ReplyKeyboardRemove())
    await state.set_state(OrderFSM.waiting_fullname)

@dp.message(OrderFSM.waiting_fullname)
async def fsm_fullname(message: Message, state: FSMContext):
    fullname = message.text.strip()
    if len(fullname.split()) < 2:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é (–∏, –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏, –æ—Ç—á–µ—Å—Ç–≤–æ).")
        return
    await state.update_data(fullname=fullname)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ *–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞* (–ø—Ä–∏–º–µ—Ä: +7 999 123-45-67):")
    await state.set_state(OrderFSM.waiting_phone)

@dp.message(OrderFSM.waiting_phone)
async def fsm_phone(message: Message, state: FSMContext):
    phone = message.text.strip()
    if not any(ch.isdigit() for ch in phone):
        await message.answer("–¢–µ–ª–µ—Ñ–æ–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ü–∏—Ñ—Ä—ã. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä:")
        return
    await state.update_data(phone=phone)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏:",
        reply_markup=checkout_delivery_ikb()
    )
    await state.set_state(OrderFSM.waiting_delivery_type)

@dp.callback_query(OrderFSM.waiting_delivery_type, F.data.startswith("delivery:"))
async def fsm_delivery_type(cb: CallbackQuery, state: FSMContext):
    _, dtype = cb.data.split(":")
    await state.update_data(delivery_type=dtype)
    if dtype == "cdek":
        text = (
            "üì¶ –î–æ—Å—Ç–∞–≤–∫–∞ *CDEK* (–ü–í–ó)\n"
            "1) –ù–∞–ø–∏—à–∏—Ç–µ *–≥–æ—Ä–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è*.\n"
            "2) –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤—å—Ç–µ *–∫–æ–¥ –ü–í–ó* –∏–ª–∏ *–∞–¥—Ä–µ—Å –ü–í–ó*.\n\n"
            "–ü–æ–¥—Å–∫–∞–∑–∫–∞: –Ω–∞–π–¥–∏—Ç–µ –ø—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏ –Ω–∞ –∫–∞—Ä—Ç–µ CDEK –∏ –ø—Ä–∏—à–ª–∏—Ç–µ –µ–≥–æ –∫–æ–¥/–∞–¥—Ä–µ—Å."
        )
        await cb.message.answer(text)
        await state.set_state(OrderFSM.waiting_cdek_city)
    else:
        await cb.message.answer("üöö –î–æ—Å—Ç–∞–≤–∫–∞ –∫—É—Ä—å–µ—Ä–æ–º. –£–∫–∞–∂–∏—Ç–µ *–ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å* (–≥–æ—Ä–æ–¥, —É–ª–∏—Ü–∞, –¥–æ–º, –∫–≤–∞—Ä—Ç–∏—Ä–∞, –ø–æ–¥—ä–µ–∑–¥, –¥–æ–º–æ—Ñ–æ–Ω):")
        await state.set_state(OrderFSM.waiting_address)
    await cb.answer()

@dp.message(OrderFSM.waiting_cdek_city)
async def fsm_cdek_city(message: Message, state: FSMContext):
    city = message.text.strip()
    await state.update_data(cdek_city=city)
    await message.answer("–û—Ç–ª–∏—á–Ω–æ. –¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ *–∫–æ–¥ –ü–í–ó* –∏–ª–∏ *—Ç–æ—á–Ω—ã–π –∞–¥—Ä–µ—Å –ü–í–ó*:")
    await state.set_state(OrderFSM.waiting_cdek_pvz)

@dp.message(OrderFSM.waiting_cdek_pvz)
async def fsm_cdek_pvz(message: Message, state: FSMContext):
    pvz = message.text.strip()
    await state.update_data(cdek_pvz=pvz)
    await show_order_preview(message, state)

@dp.message(OrderFSM.waiting_address)
async def fsm_address(message: Message, state: FSMContext):
    address = message.text.strip()
    if len(address) < 8:
        await message.answer("–ê–¥—Ä–µ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –£—Ç–æ—á–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞:")
        return
    await state.update_data(address=address)
    await show_order_preview(message, state)

async def show_order_preview(message: Message, state: FSMContext):
    user_id = message.from_user.id
    data = await state.get_data()

    items = CARTS[user_id]
    if not items:
        await state.clear()
        await message.answer("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞, –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ.", reply_markup=main_menu_kb())
        return

    total = sum(i.total for i in items)
    dtype = data.get("delivery_type")
    dtype_title = "CDEK (–ü–í–ó)" if dtype == "cdek" else "–ö—É—Ä—å–µ—Ä –¥–æ –¥–≤–µ—Ä–∏"

    lines = ["–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–∫–∞–∑ –ø–µ—Ä–µ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º:", ""]
    lines.append(format_cart(user_id))
    lines.append("")
    lines.append(f"*–î–æ—Å—Ç–∞–≤–∫–∞:* {dtype_title}")
    if dtype == "cdek":
        lines.append(f"–ì–æ—Ä–æ–¥: {data.get('cdek_city')}")
        lines.append(f"–ü–í–ó: {data.get('cdek_pvz')}")
    else:
        lines.append(f"–ê–¥—Ä–µ—Å: {data.get('address')}")
    lines.append("")
    lines.append(f"*–§–ò–û:* {data.get('fullname')}")
    lines.append(f"*–¢–µ–ª–µ—Ñ–æ–Ω:* {data.get('phone')}")
    lines.append("\n–ï—Å–ª–∏ –≤—Å—ë –≤–µ—Ä–Ω–æ ‚Äî –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑.")

    await state.update_data(total=total, delivery_type_title=dtype_title)
    await message.answer("\n".join(lines), reply_markup=confirm_ikb())
    await state.set_state(OrderFSM.confirm)

@dp.callback_query(OrderFSM.confirm, F.data == "confirm:edit_address")
async def edit_address(cb: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    if data.get("delivery_type") == "cdek":
        await cb.message.answer("–í–≤–µ–¥–∏—Ç–µ *–≥–æ—Ä–æ–¥ CDEK* –∑–∞–Ω–æ–≤–æ:")
        await state.set_state(OrderFSM.waiting_cdek_city)
    else:
        await cb.message.answer("–í–≤–µ–¥–∏—Ç–µ *–ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å* –∑–∞–Ω–æ–≤–æ:")
        await state.set_state(OrderFSM.waiting_address)
    await cb.answer()

@dp.callback_query(OrderFSM.confirm, F.data == "confirm:cancel")
async def cancel_order(cb: CallbackQuery, state: FSMContext):
    await state.clear()
    await cb.message.answer("–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu_kb())
    await cb.answer()

@dp.callback_query(OrderFSM.confirm, F.data == "confirm:yes")
async def confirm_order(cb: CallbackQuery, state: FSMContext):
    user_id = cb.from_user.id
    data = await state.get_data()
    items = CARTS[user_id]
    if not items:
        await state.clear()
        await cb.message.answer("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –ù–µ—á–µ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—Ç—å.", reply_markup=main_menu_kb())
        await cb.answer()
        return

    order_items = []
    for it in items:
        order_items.append({
            "product_id": it.product_id,
            "name": it.name,
            "size": it.size,
            "price": it.price,
            "qty": it.qty,
            "total": it.total
        })

    order = {
        "created_at": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        "user_id": user_id,
        "username": cb.from_user.username,
        "fullname": data.get("fullname"),
        "phone": data.get("phone"),
        "delivery_type": data.get("delivery_type"),
        "delivery_type_title": data.get("delivery_type_title"),
        "cdek_city": data.get("cdek_city"),
        "cdek_pvz": data.get("cdek_pvz"),
        "address": data.get("address"),
        "items": order_items,
        "total": data.get("total"),
    }

    save_order(order)
    await notify_admins(cb.message.bot, order)


    await state.clear()
    empty_cart(user_id)

    await cb.message.answer("‚úÖ –ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π. –°–ø–∞—Å–∏–±–æ!",
                            reply_markup=main_menu_kb())
    await cb.answer()

@dp.message(Command("orders"))
async def admin_orders(message: Message):
    if message.from_user.id not in ADMIN_CHAT_IDS:
        await message.answer("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        return
    path = "orders.json"
    if not os.path.exists(path):
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.")
        return
    try:
        with open(path, "r", encoding="utf-8") as f:
            data = json.load(f)
    except Exception:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å orders.json")
        return

    if not data:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.")
        return


    last = data[-5:]
    for o in last:
        lines = [
            f"üßæ *–ó–∞–∫–∞–∑ –æ—Ç {o.get('created_at')}*",
            f"–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {o.get('fullname')}  |  –¢–µ–ª: {o.get('phone')}",
            f"–î–æ—Å—Ç–∞–≤–∫–∞: {o.get('delivery_type_title')}",
        ]
        if o.get("delivery_type") == "cdek":
            lines.append(f"–ì–æ—Ä–æ–¥: {o.get('cdek_city')} | –ü–í–ó: {o.get('cdek_pvz')}")
        else:
            lines.append(f"–ê–¥—Ä–µ—Å: {o.get('address')}")
        lines.append("–¢–æ–≤–∞—Ä—ã:")
        for it in o.get("items", []):
            lines.append(f"‚Ä¢ {it['name']} ‚Äî {it['size']} √ó {it['qty']} = {it['total']} ‚ÇΩ")
        lines.append(f"–ò—Ç–æ–≥–æ: *{o.get('total')} ‚ÇΩ*")
        await message.answer("\n".join(lines))
    return


@dp.message(Command("cats"))
async def cats_cmd(message: Message):
    await message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:", reply_markup=categories_ikb())

async def main():
    print("Bot starting...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        print("Bot stopped")
